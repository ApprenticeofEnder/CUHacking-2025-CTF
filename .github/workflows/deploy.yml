name: deploy

on:
  workflow_dispatch:
    branches:
      - main
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TERRAFORM_DIR: terraform
  DB_NAME: pilots

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@main

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: "just-a-placeholder-so-we-dont-get-errors"
          name: "cuhacking_2025_ed25519"

      - name: Setup Ansible
        run: |
          python3 -m pip install --user ansible
          ansible-galaxy collection install -r $TERRAFORM_DIR/requirements.yml

      - name: Setup Terraform
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
          # For some reason DO spaces uses an AWS prefix????????
          AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
          TF_VAR_ansible_ssh_private_key_file: ${{ vars.SSH_PRIVATE_KEY_FILE }}
          TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
          TF_VAR_image_registry: ${{ env.REGISTRY }}
        run: |
          # install opentofu
          scripts/install-opentofu.sh --install-method deb
          tofu -version
          cd $TERRAFORM_DIR
          tofu init
          tofu validate

      # - name: Set version
      #   id: release
      #   run: echo ::set-output name=version::$(git describe --always)
      #
      # - name: Set image details
      #   id: image
      #   env:
      #     IMAGE_TAG: ${{ steps.release.outputs.version }}
      #     IMAGE_NAME: ${{ env.IMAGE_NAME }}
      #   run: |
      #     IMAGE_NAME_LC="${IMAGE_NAME,,}"
      #     echo "IMAGE_NAME_LC=$IMAGE_NAME_LC" >> ${GITHUB_ENV}
      #     echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> ${GITHUB_ENV}
      #     echo "IMAGE_NAME_FULL_LC=${{ env.REGISTRY }}/$IMAGE_NAME_LC:${{ env.IMAGE_TAG }}" >> ${GITHUB_ENV}
      #
      # - name: Build container image
      #   env:
      #     DATABASE_URL: postgres://postgres:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/${{ env.DB_NAME }}
      #   run: |
      #     docker build --secret id=DATABASE_URL \
      #       -t "${{ env.IMAGE_NAME_FULL_LC }}" \
      #       challenge
      #
      # - name: Docker Login
      #   run: echo ${{ secrets.CI_PAT }} | docker login ${{ env.REGISTRY }} -u ${{ github.repository_owner }} --password-stdin
      #
      # - name: Push image to Docker Registry
      #   run: docker push "${{ env.IMAGE_NAME_FULL_LC }}"

      - name: Deploy
        timeout-minutes: 10
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
          # For some reason DO spaces uses an AWS prefix????????
          AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
          TF_VAR_ansible_ssh_private_key_file: ${{ vars.SSH_PRIVATE_KEY_FILE }}
          TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
          TF_VAR_image_registry: ${{ env.REGISTRY }}
          TF_VAR_image_registry_username: ${{ github.repository_owner }}
          TF_VAR_image_registry_password: ${{ secrets.CI_PAT }}
          TF_VAR_challenge_image_name: ${{ env.IMAGE_NAME_LC }}
          TF_VAR_challenge_image_tag: ${{ env.IMAGE_TAG }}
        run: |
          # apply infra changes
          cd $TERRAFORM_DIR
          tofu plan -out .terraform-plan
          tofu apply .terraform-plan
          cat inventory.ini
          MANAGER_IP=$(tofu output -json manager_ip | jq -r .)
          WORKER_IP_0=$(tofu output -json worker_ip | jq -r '.[0]')
          WORKER_IP_1=$(tofu output -json worker_ip | jq -r '.[1]')

          test_connection() {
            local IP="$1"
            while
              RESULT=$(ssh -q -o BatchMode=yes ConnectTimeout=5 -i ${{ vars.SSH_PRIVATE_KEY_FILE }} root@$IP echo ok 2>&1)
              echo $RESULT
              [[ $RESULT == "ok" ]]
            do echo "Attempting to connect to $IP..."; done
          }

          test_connection $MANAGER_IP
          test_connection $WORKER_IP_0
          test_connection $WORKER_IP_1

          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook -i inventory.ini playbooks/docker.yml
          ansible-playbook -i inventory.ini playbooks/swarm.yml
